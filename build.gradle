plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'idea'
    id 'jacoco'
}

group = 'com.Monopoly'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            srcDirs = ['src/test/integration/java']
        }
        resources {
            srcDirs = ['src/test/integration/resources']
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
    unitTest {
        java {
            srcDirs = ['src/test/unit/java']
        }
        resources {
            srcDirs = ['src/test/unit/resources']
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    testImplementation 'org.mockito:mockito-core:5.11.0'
}

idea {
    module {
        testSources.from(sourceSets.integrationTest.java.srcDirs)
        testSources.from(sourceSets.unitTest.java.srcDirs)
    }
}

test {
    systemProperty 'spring.profiles.active', 'test'
    testClassesDirs = sourceSets.unitTest.output.classesDirs
    classpath = sourceSets.unitTest.runtimeClasspath
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.register("integrationTest", Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    testLogging { events "passed", "skipped", "failed" }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

def excludedFiles = [
        'com/monopoly/config/**',
        'com/monopoly/MonopolyBackendApplication.class',
]

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedFiles)
        }))
    }
    reports {
        xml.required = true
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "CLASS"
                value = "COVEREDRATIO"
                minimum = 0.95
            }
            limit {
                counter = 'LINE'
                minimum = 0.95
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedFiles)
        }))
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

integrationTest {
    minHeapSize("512m")
    maxHeapSize("1024m")
    environment("TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE", "/var/run/docker.sock")
    environment("DOCKER_HOST", "unix://${System.getenv("HOME")}/.colima/docker.sock")
    useJUnitPlatform()
}
